apiVersion: v1
kind: Template
labels:
  template: debian-kubernetes
message: |-
  ¡¡CUIDADO!! Este Kubernetes __EFIMERO__ podrá ser formateado en cualquier
  momento perdiendo todos los cambios realizados sobre él.
  Si esto ocurre se levantará automáticamente otro vacío y te llegará un correo
  con el nuevo token.

metadata:
  annotations:
    description: Debian Kubernetes Instance
    iconClass: icon-kubevirt
    openshift.io/display-name: Debian Kubernetes Instance (Ephemeral)
    openshift.io/provider-display-name: Paradigma Digital
    tags: debian,kubernetes,VirtualMachineInstance,virtual,machine,instance
  name: debian-kubernetes
objects:
- apiVersion: kubevirt.io/v1alpha2
  kind: VirtualMachineInstanceReplicaSet
  metadata:
    name: ${VM_NAME}-replicaset
  spec:
    replicas: 1
    selector:
      matchLabels:
        expose: ${VM_NAME}
    template:
      metadata:
        labels:
          expose: ${VM_NAME}
        name: ${VM_NAME}-6443
      spec:
        terminationGracePeriodSeconds: 30
        hostname: "${VM_NAME}-6443"
        subdomain: "paradigma"
        domain:
          cpu:
            cores: "${{CORES}}"
          resources:
            requests:
              memory: "${MEMORY_LIMIT}"
          devices:
            disks:
            - name: registrydisk
              volumeName: registryvolume
              disk:
                bus: virtio
            - name: emptydisk
              volumeName: emptydiskvolume
              disk:
                bus: virtio
            - disk:
                bus: virtio
              name: cloudinitdisk
              volumeName: cloudinitvolume
      #      - disk:
      #          bus: virtio
      #        name: mypvc
      #        volumeName: cloudinitvolume
            interfaces:
              - name: default
                bridge: {}
        networks:
          - name: default
            pod: {}
        volumes:
        - name: registryvolume
          registryDisk:
            image: docker-registry.default.svc:5000/openshift/debian-kubernetes
        - name: emptydiskvolume
          emptyDisk:
            capacity: "5Gi"
        - name: cloudinitvolume
          cloudInitNoCloud:
            userData: |
              #cloud-config
              password: ${PASSWORD}
              chpasswd: { expire: False }
              package_update: true
              packages: [python-pip, python-netaddr, git, postfix, mutt]
              write_files:
              - path: /root/admin-user-service-account.yaml
                content: |
                  apiVersion: v1
                  kind: ServiceAccount
                  metadata:
                    name: admin-user
                    namespace: kube-system
              - path: /root/admin-user-cluster-role-binding.yaml
                content: |
                  apiVersion: rbac.authorization.k8s.io/v1
                  kind: ClusterRoleBinding
                  metadata:
                    name: admin-user
                  roleRef:
                    apiGroup: rbac.authorization.k8s.io
                    kind: ClusterRole
                    name: cluster-admin
                  subjects:
                  - kind: ServiceAccount
                    name: admin-user
                    namespace: kube-system
              - path: /root/kubespray-deploy.sh
                content: |
                  #!/bin/bash
                  # Prepare kubespray environment
                  pip install ansible==2.7.5
                  git clone https://github.com/kubernetes-sigs/kubespray /root/kubespray
                  cd /root/kubespray && git checkout tags/v2.7.0
                  cp -rfp /root/kubespray/inventory/sample /root/kubespray/inventory/mycluster
                  cd /root/kubespray
                  cp /root/hosts.ini /root/kubespray/inventory/mycluster/hosts.ini
                  IP_DEFAULT_GW=`hostname -I | awk '{print $1}'`
                  sed -i "s/IP_DEFAULT_GW/${IP_DEFAULT_GW}/g" /root/kubespray/inventory/mycluster/hosts.ini
                  cd /root/kubespray && pip install -r requirements.txt

                  # Begin addons configuration
                  addons_file=/root/kubespray/inventory/mycluster/group_vars/k8s-cluster/addons.yml

                  # Configure helm deployment
                  sed -i "s/^helm_enabled: .*$/helm_enabled: true/" $addons_file

                  # Configure local volume provisioner deployment (only useful now to create storageClass)
                  mkdir -p /mnt/disks
                  sed -i "s/^local_volume_provisioner_enabled: .*$/local_volume_provisioner_enabled: true/" $addons_file

                  # Configure Deploy ingress
                  sed -i "s/^ingress_nginx_enabled: .*$/ingress_nginx_enabled: true/" $addons_file

                  # Deploy Kubernetes
                  ansible-playbook -i /root/kubespray/inventory/mycluster/hosts.ini /root/kubespray/cluster.yml

                  # Set default storage class and create static volumes
                  kubectl patch storageclass local-storage -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
                  for i in `seq 1 50`; do
                    mkdir -p /mnt/static_disks/pv-${i}
                    chmod +s /mnt/static_disks/pv-${i}
                    chmod 777 /mnt/static_disks/pv-${i}
                    sed "s/\${VOLUME_NAME}/pv-$i/g" /root/pv-template.yaml | kubectl create -f -
                  done
              - path: /root/hosts.ini
                content: |
                  [all:vars]
                  ansible_connection=local
                  ansible_kubectl_kubeconfig=/root/.kube/config
                  ansible_kubectl_config=/root/.kube/config

                  [all]
                  ${VM_NAME}-6443 	 ansible_host=IP_DEFAULT_GW ip=IP_DEFAULT_GW

                  [kube-master]
                  ${VM_NAME}-6443

                  [etcd]
                  ${VM_NAME}-6443

                  [kube-node]
                  ${VM_NAME}-6443

                  [k8s-cluster:children]
                  kube-master
                  kube-node

                  [calico-rr]

                  [vault]
                  ${VM_NAME}-6443
              - path: /root/access_data_message.txt
                content: |
                  Congratulations!

                  You have deployed a new __EPHEMERAL__ Kubernetes __EPHEMERAL__
                  instance.

                  Your access key has been attached and console is accesible in
                  /api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
                  using the token attached .

                  You can get the route running:
                  $ oc get route

                  Or going to "Application | Routes" in OpenShift Web Console,
                  clicking in route and adding the endpoint above.

                  Kubectl command line to get pods:
                  $ kubectl --insecure-skip-tls-verify=true --server=https://api-route --token=**** get pods

                  Get the instance EXTERNAL-IP ip address:
                  $ oc get services

                  When this instance was destroyed it will be automatically
                  rebuilt and you will receive an e-mail with your new token.

                  Happy Kuberneting!

              - path: /root/kubernetes-dashboard.sh
                content: |
                  #!/bin/bash
                  kubectl --kubeconfig='/root/.kube/config' create -f /root/admin-user-service-account.yaml
                  kubectl --kubeconfig='/root/.kube/config' create -f /root/admin-user-cluster-role-binding.yaml
                  echo "relayhost = ${MAIL_RELAY}" >> /etc/postfix/main.cf
                  systemctl restart postfix
                  kubectl --kubeconfig='/root/.kube/config' -n kube-system describe secret $(kubectl --kubeconfig='/root/.kube/config' -n kube-system get secret | grep admin-user | awk '{print $1}') > /root/tokens.txt
                  cat /root/access_data_message.txt | mutt -a /root/tokens.txt -s "Your Kubernetes access data" -- ${EMAIL}
              - path: /root/pv-template.yaml
                content: |
                  apiVersion: v1
                  kind: PersistentVolume
                  metadata:
                    name: ${VOLUME_NAME}
                  spec:
                    capacity:
                      storage: 10Gi
                    volumeMode: Filesystem
                    accessModes:
                      - ReadWriteOnce
                    persistentVolumeReclaimPolicy: Recycle
                    storageClassName: local-storage
                    hostPath:
                      path: "/mnt/static_disks/${VOLUME_NAME}"
              runcmd:
              - bash /root/kubespray-deploy.sh
              - bash /root/kubernetes-dashboard.sh
      #  - name: mypvc
      #    persistentVolumeClaim:
      #      claimName: mypvc
- apiVersion: v1
  kind: Service
  metadata:
    name: ${VM_NAME}-22
  spec:
    selector:
      expose: ${VM_NAME}
  #  clusterIP: None
    ports:
    - name: tcp-22 # Actually, no port is needed.
      port: 22
      protocol: TCP
      targetPort: 22
  #  type: ClusterIP
    externalTrafficPolicy: Cluster
    type: LoadBalancer
- apiVersion: v1
  kind: Service
  metadata:
    name: ${VM_NAME}-80
  spec:
    selector:
      expose: ${VM_NAME}
    ports:
    - name: http-80 # Actually, no port is needed.
      port: 80
      protocol: TCP
      targetPort: 80
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: ${VM_NAME}-6443
  spec:
    selector:
      expose: ${VM_NAME}
    ports:
    - name: http-6443 # Actually, no port is needed.
      port: 6443
      protocol: TCP
      targetPort: 6443
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: ${VM_NAME}-443
  spec:
    selector:
      expose: ${VM_NAME}
    ports:
    - name: http-443 # Actually, no port is needed.
      port: 443
      protocol: TCP
      targetPort: 443
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${VM_NAME}
      template: ${VM_NAME}
    name: ${VM_NAME}-6443
  spec:
#    host: ${KUBERNETES_HOSTNAME}
    port:
      targetPort: http-6443
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${VM_NAME}-6443
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${VM_NAME}
      template: ${VM_NAME}
    name: ${VM_NAME}-443
  spec:
#    host: ${KUBERNETES_HOSTNAME}
    port:
      targetPort: http-443
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${VM_NAME}-443
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${VM_NAME}
      template: ${VM_NAME}
    name: ${VM_NAME}-80
  spec:
#    host: ${KUBERNETES_HOSTNAME}
    port:
      targetPort: http-80
    to:
      kind: Service
      name: ${VM_NAME}-80
      weight: 100
    wildcardPolicy: None
parameters:
- description: Virtual Machine Name.
  displayName: Virtual Machine Name
  name: VM_NAME
  required: true
  value: debian-kubernetes
- description: Container memory limit.
  displayName: Container Memory Limit
  name: MEMORY_LIMIT
  value: 8196M
- description: Number of cores
  displayName: cores
  name: CORES
  value: "2"
- description: Kubernetes VM password
  displayName: Kubernetes VM password
  name: PASSWORD
  value: debian
- description: Mail Relay Host
  displayName: Mail Relay Host
  name: MAIL_RELAY
  value: smtp-relay
- description: Your e-mail address to receive access token
  displayName: Your e-mail address to receive access token
  name: EMAIL
  value: jmferrer@paradigmadigital.com
